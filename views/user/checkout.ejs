<%-include("../../views/partials/user/header")%>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout Confirmation</title>
    <style>
        /* General Styles */
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f5f5f5;
            color: #333;
        }

        /* Layout */
        .container1 {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .flex-container1 {
            display: flex;
            gap: 20px;
        }

        .left-column {
            flex: 7;
        }

        .right-column {
            flex: 3;
        }

        @media (max-width: 768px) {
            .flex-container1 {
                flex-direction: column;
            }
        }

        /* Checkout Page Components */
        .checkout-header {
            text-align: center;
            margin-bottom: 10px;
            padding: 7px 0;
            border-bottom: 1px solid #ddd;
        }

        .checkout-section {
            background-color: #fff;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 1px solid #eee;
        }

        .section-title {
            font-size: 18px;
            font-weight: bold;
            color: #333;
            display: flex;
            align-items: center;
        }

        /* Buttons */
        .change-btn {
            background-color: transparent;
            color: #2874f0;
            border: 1px solid #2874f0;
            padding: 8px 15px;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .change-btn:hover {
            border-color: #1a5cbd;
            color: #1a5cbd;
            box-shadow: 0 0 0 2px rgba(40, 116, 240, 0.2);
        }

        .button-primary {
            background-color: #fb641b;
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 4px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            width: 100%;
            margin-top: 20px;
            transition: background-color 0.3s;
        }

        .button-primary:hover {
            background-color: #e05714;
        }

        .btn {
            padding: 10px 20px;
            border-radius: 4px;
            font-weight: 500;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.2s;
            border: none;
        }

        .btn-primary {
            background-color: #2874f0;
            color: white;
        }

        .btn-primary:hover {
            background-color: #1a5cbd;
        }

        .btn-secondary {
            background-color: white;
            color: #2874f0;
            border: 1px solid #2874f0;
        }

        .btn-secondary:hover {
            background-color: #f5f9ff;
        }

        /* Address Cards */
        .address-card {
            border: 1px solid #ddd;
            border-radius: 6px;
            padding: 15px;
            margin-bottom: 15px;
            position: relative;
            cursor: pointer;
            transition: border-color 0.3s;
        }

        .address-card:hover {
            border-color: #2874f0;
        }

        .address-card.selected {
            border: 2px solid #2874f0;
            background-color: #f0f5ff;
        }

        .address-radio {
            position: absolute;
            top: 15px;
            left: 15px;
            display: none;
        }

        .customer-name {
            font-weight: bold;
            margin-bottom: 5px;
        }

        .address-list {
            display: none;
        }

        .add-new-address {
            display: flex;
            align-items: center;
            border: 1px dashed #2874f0;
            border-radius: 6px;
            padding: 15px;
            margin-bottom: 15px;
            background-color: #f7faff;
            cursor: pointer;
        }

        .add-new-address:hover {
            background-color: #f0f5ff;
        }

        .plus-icon {
            font-size: 24px;
            color: #2874f0;
            margin-right: 10px;
        }

        /* Payment Options */
        .payment-options {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .payment-option {
            display: flex;
            align-items: center;
            border: 1px solid #ddd;
            border-radius: 6px;
            padding: 15px;
            cursor: pointer;
            transition: all 0.3s;
        }

        .payment-option:hover {
            border-color: #2874f0;
            background-color: #f0f5ff;
        }

        .payment-option.selected {
            border: 2px solid #2874f0;
            background-color: #f0f5ff;
        }

        .payment-radio {
            margin-right: 15px;
        }

        .payment-icon {
            width: 40px;
            height: 40px;
            margin-right: 15px;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: #f0f0f0;
            border-radius: 4px;
        }

        .payment-details {
            flex-grow: 1;
        }

        .payment-title {
            font-weight: bold;
            margin-bottom: 3px;
        }

        .payment-description {
            font-size: 14px;
            color: #666;
        }

        /* Price Summary */
        .price-summary {
            background-color: #fff;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .price-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
            padding-bottom: 10px;
            border-bottom: 1px dashed #eee;
        }

        .price-row:last-child {
            border-bottom: none;
        }

        .total-row {
            font-weight: bold;
            font-size: 18px;
            border-top: 1px solid #ddd;
            padding-top: 15px;
            margin-top: 10px;
        }

        /* Modal Styles */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
        }

        .modal-content {
            background-color: #fff;
            border-radius: 8px;
            width: 100%;
            max-width: 600px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            animation: fadeIn 0.3s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .modal-header {
            padding: 15px 20px;
            border-bottom: 1px solid #e5e5e5;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-title {
            margin: 0;
            font-size: 18px;
            font-weight: 600;
        }

        .modal-close {
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: #888;
            transition: color 0.2s;
        }

        .modal-close:hover {
            color: #333;
        }

        .modal-body {
            padding: 20px;
            background-color: #f8f9fa;
            border-radius: 0 0 8px 8px;
        }

        /* Form Styles */
        .form-row {
            display: flex;
            gap: 15px;
            margin-bottom: 15px;
        }

        .form-group {
            flex: 1;
        }

        .form-control {
            width: 100%;
            padding: 10px 12px;
            border: 1px solid #ccc;
            border-radius: 4px;
            font-size: 14px;
            transition: border-color 0.2s;
            box-sizing: border-box;
        }

        .form-control:focus {
            border-color: #2874f0;
            outline: none;
            box-shadow: 0 0 0 2px rgba(40, 116, 240, 0.2);
        }

        textarea.form-control {
            resize: vertical;
            min-height: 80px;
        }

        .form-select {
            width: 100%;
            padding: 10px 12px;
            border: 1px solid #ccc;
            border-radius: 4px;
            font-size: 14px;
            background-color: white;
            cursor: pointer;
        }

        .radio-group {
            display: flex;
            gap: 20px;
            margin-bottom: 20px;
        }

        .radio-option {
            display: flex;
            align-items: center;
        }

        .radio-option input[type="radio"] {
            margin-right: 6px;
        }

        .button-group {
            display: flex;
            gap: 10px;
            justify-content: flex-start;
        }

        .error {
            color: #ff6161;
            font-size: 12px;
            margin-top: 5px;
            display: none;
        }

        .error.show {
            display: block;
        }

        @media (max-width: 768px) {
            .form-row {
                flex-direction: column;
                gap: 10px;
            }
            .modal-content {
                width: 90%;
                margin: 0 10px;
            }
        }
       

    .product-item {
    display: flex;
    padding: 20px 0;
    border-bottom: 1px solid #e0e0e0;
}

.product-imag {
    width: 120px;
    height: 120px;
    margin-right: 20px;
}

.imgProduct {
    width: 114px;
    margin-right: 14px;
}

.product-imag img {
    width: 100%;
    height: 100%;
    object-fit: contain;
}

.product-details {
    flex: 1;
}

.product-title {
    font-size: 16px;
    margin-bottom: 8px;
    color: #333;
}

.product-price {
    font-weight: 600;
    font-size: 20px;
    color: #070606;
    margin-bottom: 0px;
}
.product-span-price {
    font-size: 14px;
   
}

.product-weight {
    font-size: 14px;
    color: #666;
    margin-bottom: 10px;
}

.out-of-stock {
    color: #ff4d4f;
    font-size: 14px;
    margin-bottom: 10px;
}

.action-buttons {
    display: flex;
    margin-top: 15px;
}

.save-btn, .remove-btn {
    background: none;
    border: none;
    font-size: 14px;
    font-weight: bold;
    cursor: pointer;
    margin-right: 15px;
}

.remove-btn {
    color: #333;
    margin-left: 30px;
}

.containerCartButton {
    display: flex;
    align-items: center;
    gap: 8px;
}

.control-btn {
    width: 25px;
    height: 25px;
    border: none;
    border-radius: 50%;
    background-color: #fff;
    font-size: 18px;
    cursor: pointer;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    display: flex;
    justify-content: center;
    align-items: center;
}

.control-btn:hover {
    background-color: #f0f0f0;
}

.display {
    width: 30px;
    height: 23px;
    background-color: #fff;
    border: 1px solid #ccc;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 14px;
    font-weight: bold;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
}

        
        </style>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
</head>
<body>
    <div class="container1">
        <div class="checkout-header">
            <h1>Complete Your Order</h1>
        </div>
        
        <div class="flex-container1">
            <div class="left-column">
                <div class="checkout-section">
                    <div class="section-header">
                        <div class="section-title">DELIVERY ADDRESS</div>
                        <button id="address-change-btn" class="change-btn">CHANGE</button>
                    </div>
                    
                    
                    <div id="current-address" class="address-card selected">
                        <input type="radio" name="address" class="address-radio" checked>
                        <input id="defaultSelectAddress" type="hidden" value="<%=address.address[0]._id%>" >
                        <div class="customer-name"><%=address.address[0].name%></div>
                        <div class="address-line"><%= address.address[0].address %>, <%= address.address[0].postOffice %>,</div>
                        <div class="address-line"><%= address.address[0].district %>, <%= address.address[0].state %> - <%= address.address[0].pincode %></div>
                    </div>
                    
                    <div id="address-list" class="address-list">
                        <div class="add-new-address" id="open-add-modal">
                            <span class="plus-icon">+</span>
                            <div>
                                <div class="payment-title">Add New Address</div>
                                <div class="payment-description">Add a new delivery location</div>
                            </div>
                        </div>
                        <% address.address.forEach(data=>{%>
                        <div class="address-card " data-id="<%=data._id%>">
                            <input type="radio" name="address-list" class="address-radio" checked>
                            <input type="hidden" value="<%=data._id%>" >
                            <div class="customer-name"><%=data.name%> </div><span class="address-line"><%=data.phone%></span>
                            <div class="address-line"><%= data.address %>, <%= data.postOffice %>,</div>
                            <div class="address-line"><%= data.district %>, <%= data.state %> - <%= data.pincode %></div>
                            <button class="btn btn-outline-primary btn-sm position-absolute top-0 end-0 m-2 d-flex align-items-center"
                                    onclick="editAddress('<%=data._id%>', '<%=data.name%>', '<%=data.address%>', '<%=data.postOffice%>', '<%=data.district%>', '<%=data.state%>', '<%=data.pincode%>','<%=data.phone%>')">
                                <i class="fas fa-pen me-1"></i> Edit
                            </button>
                        </div>
                        <%})%>
                        <button id="confirm-address-btn" class="button-primary">CONFIRM ADDRESS</button>
                    </div>
                </div>


                <div class="checkout-section">
                    <div class="section-header">
                        <div class="section-title"></div>
                    </div>
                    <div class="left-section">
                        <% cart.items.forEach(item=>{ %>
                        <div class="product-item">
                            <div class="product-imag">
                               
                                    <img class="imgProduct" src="<%=item.productId.productImage[0]%>" alt="Product">
                                
                            </div>
                            <div class="product-details">
                                
                                    <h3 class="product-title"><%=item.productId.productName%></h3>
                                    
                                
                                <p class="product-price">₹<%=item.totalPrice%><span class="product-span-price">   (<%=item.quantity%> x <%=item.price%>) </span></p>  
                                
                                <p class="product-weight"><%=item.productId.varient%></p>
                    
                                <% if(item.productId.stock == 0) { %>
                                    <p class="out-of-stock">Currently out of stock</p>
                                <% } %>
                    
                                
                            </div>
                        </div>
                        <% }) %>
                    </div>
                    

                </div>
                
                <div class="checkout-section">
                    <div class="section-header">
                        <div class="section-title">PAYMENT OPTIONS</div>
                    </div>
                    <a onclick="paymentOption()" >
                    <div class="payment-options">
                        <div class="payment-option selected">
                            <input type="radio" name="payment" class="payment-radio" checked>
                            <div class="payment-icon">💰</div>
                            <div class="payment-details">
                                <div class="payment-title">Cash on Delivery</div>
                                <div class="payment-description">Pay when your order is delivered</div>
                            </div>
                        </div>
                    </a>
                        <a  onclick="paymentOption1()">
                         <div  class="payment-option">
                            <input type="radio" name="payment" class="payment-radio">
                            <div class="payment-icon">💳</div>
                            <div class="payment-details">
                                <div class="payment-title">Razorpay</div>
                                <div class="payment-description">Pay securely with Razorpay</div>
                            </div>
                        </div>
                    </a>
                    <a  onclick="paymentOption2()">
                       <div class="payment-option">
                            <input type="radio" name="payment" class="payment-radio">
                            <div class="payment-icon">👛</div>
                            <div class="payment-details">
                                <div class="payment-title">Wallet</div>
                                <div class="payment-description">Pay using your digital wallet</div>
                            </div>
                        </div>
                            </a>
                    </div>
                </div>
            </div>
            
            <div class="right-column">
                <div class="price-summary">
                    <h3>PRICE DETAILS</h3>
                    <div class="price-row">
                        <div>Price (<%=cart.items.length%> items)</div>
                        <%
                        let totalAmount=0
                        cart.items.forEach(item=>{
                            totalAmount+=item.totalPrice
                        })
                        %>
                        <div>₹<%=totalAmount%></div>
                    </div>
                    <div class="price-row">
                        <div>Discount</div>
                        <div>₹<%=totalDiscount%></div>
                    </div>
                    <div class="price-row">
                        <div>Coupon Discount</div>
                        <div style="color: #388e3c;"><%=couponDiscount%></div>
                    </div>
                    
                    <div class="price-row total-row">
                        <div>Amount Payable</div>
                        <div>₹<%=totalAmount-totalDiscount-couponDiscount%></div>
                    </div>
                    <input type="hidden" name="addressId" id="selectedAddressId">
                    <input type="hidden" name="paymentOption" id="selectedPaymentOption" value="cashOnDelivery">
                    <button onclick="placeOrder()" class="button-primary">CONFIRM ORDER</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal-overlay" id="add-address-modal" style="display: none;">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Add New Address</h3>
                <button class="modal-close" id="close-add-modal">×</button>
            </div>
            <div class="modal-body">
                <form id="add-address-form" method="post" >
                    <div class="form-row">
                        <div class="form-group">
                            <input type="text" class="form-control" placeholder="Name" id="add-name" name="name">
                            <p class="error" id="add-name-error">Please enter valid name</p>
                        </div>
                        <div class="form-group">
                            <input type="text" class="form-control" placeholder="10-digit mobile number" id="add-phone" name="phone">
                            <p class="error" id="add-phone-error">Enter valid phone number</p>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <input type="text" class="form-control" placeholder="Pincode" id="add-pincode" name="pincode">
                            <p class="error" id="add-pincode-error">Valid 6-digit pincode required</p>
                        </div>
                        <div class="form-group">
                            <input type="text" class="form-control" placeholder="Post Office" id="add-post" name="post">
                            <p class="error" id="add-post-error">Please enter valid post office</p>
                        </div>
                    </div>
                    <div class="form-group" style="margin-bottom: 15px;">
                        <textarea class="form-control" placeholder="Address (Area and Street)" name="address" id="add-address"></textarea>
                        <p class="error" id="add-address-error">Address is required, minimum 10 characters</p>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <input type="text" class="form-control" placeholder="City/District/Town" name="district" id="add-district">
                            <p class="error" id="add-district-error">Enter a valid district</p>
                        </div>
                        <div class="form-group">
                            <select class="form-select" name="state" id="add-state">
                                <option value="">--Select State--</option>
                                <option value="Kerala">Kerala</option>
                                <option value="Tamil Nadu">Tamil Nadu</option>
                                <option value="Karnataka">Karnataka</option>
                            </select>
                            <p class="error" id="add-state-error">Please select a state</p>
                        </div>
                    </div>
                    <div class="form-group" style="margin-bottom: 15px;">
                        <input type="text" class="form-control" placeholder="Alternate Phone (Optional)" name="altPhone" id="add-altPhone">
                        <p class="error" id="add-altPhone-error">Alternate phone must be a valid 10-digit number</p>
                    </div>
                    <div class="radio-group">
                        <div class="radio-option">
                            <input type="radio" id="add-home" name="addressType" value="home" checked>
                            <label for="add-home">Home</label>
                        </div>
                        <div class="radio-option">
                            <input type="radio" id="add-work" name="addressType" value="office">
                            <label for="add-work">Work</label>
                        </div>
                    </div>
                    <div class="button-group">
                        <button type="submit" class="btn btn-primary">SAVE</button>
                        <button type="button" class="btn btn-secondary" id="cancel-add-btn">CANCEL</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <div class="modal-overlay" id="edit-address-modal" style="display: none;">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Edit Address</h3>
                <button class="modal-close" id="close-edit-modal">×</button>
            </div>
            <div class="modal-body">
                <form id="edit-address-form">
                    <input type="hidden" id="edit-id" name="id">
                    <div class="form-row">
                        <div class="form-group">
                            <input type="text" class="form-control" placeholder="Name" id="edit-name" name="name">
                            <p class="error" id="edit-name-error">Please enter valid name</p>
                        </div>
                        <div class="form-group">
                            <input type="text" class="form-control" placeholder="10-digit mobile number" id="edit-phone" name="phone">
                            <p class="error" id="edit-phone-error">Enter valid phone number</p>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <input type="text" class="form-control" placeholder="Pincode" id="edit-pincode" name="pincode">
                            <p class="error" id="edit-pincode-error">Valid 6-digit pincode required</p>
                        </div>
                        <div class="form-group">
                            <input type="text" class="form-control" placeholder="Post Office" id="edit-post" name="postOffice">
                            <p class="error" id="edit-post-error">Please enter valid post office</p>
                        </div>
                    </div>
                    <div class="form-group" style="margin-bottom: 15px;">
                        <textarea class="form-control" placeholder="Address (Area and Street)" name="address" id="edit-address"></textarea>
                        <p class="error" id="edit-address-error">Address is required, minimum 10 characters</p>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <input type="text" class="form-control" placeholder="City/District/Town" name="district" id="edit-district">
                            <p class="error" id="edit-district-error">Enter a valid district</p>
                        </div>
                        <div class="form-group">
                            <select class="form-select" name="state" id="edit-state">
                                <option value="">--Select State--</option>
                                <option value="Kerala">Kerala</option>
                                <option value="Tamil Nadu">Tamil Nadu</option>
                                <option value="Karnataka">Karnataka</option>
                            </select>
                            <p class="error" id="edit-state-error">Please select a state</p>
                        </div>
                    </div>
                    <div class="form-group" style="margin-bottom: 15px;">
                        <input type="text" class="form-control" placeholder="Alternate Phone (Optional)" name="altPhone" id="edit-altPhone">
                        <p class="error" id="edit-altPhone-error">Alternate phone must be a valid 10-digit number</p>
                    </div>
                    <div class="radio-group">
                        <div class="radio-option">
                            <input type="radio" id="edit-home" name="addressType" value="home">
                            <label for="edit-home">Home</label>
                        </div>
                        <div class="radio-option">
                            <input type="radio" id="edit-work" name="addressType" value="office">
                            <label for="edit-work">Work</label>
                        </div>
                    </div>
                    <div class="button-group">
                        <button type="submit" class="btn btn-primary">SAVE</button>
                        <button type="button" class="btn btn-secondary" id="cancel-edit-btn">CANCEL</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <script>
        // Show address list when Change button is clicked
        document.getElementById('address-change-btn').addEventListener('click', function() {
            document.getElementById('current-address').style.display = 'none';
            document.getElementById('address-list').style.display = 'block';
            this.style.display = 'none';
        });
        
        // Hide address list and show selected address when Confirm button is clicked
        document.getElementById('confirm-address-btn').addEventListener('click', function() {
            const selectedAddress = document.querySelector('#address-list .address-card.selected');
            if (selectedAddress) {
                document.getElementById('current-address').innerHTML = selectedAddress.innerHTML;
                document.getElementById('current-address').style.display = 'block';
            }
            document.getElementById('address-list').style.display = 'none';
            document.getElementById('address-change-btn').style.display = 'block';
        });
        document.getElementById('selectedAddressId').value= document.getElementById('defaultSelectAddress').value;
        // Handle address selection
        document.querySelectorAll('#address-list .address-card').forEach(card => {
            card.addEventListener('click', function() {
                document.querySelectorAll('#address-list .address-card').forEach(c => c.classList.remove('selected'));
                this.classList.add('selected');
                this.querySelector('.address-radio').checked = true;
                const addressId = this.getAttribute('data-id') || document.getElementById('defaultSelectAddress').value;
        document.getElementById('selectedAddressId').value = addressId;
            });
        });

        // Handle payment option selection
        document.querySelectorAll('.payment-option').forEach(option => {
            option.addEventListener('click', function() {
                document.querySelectorAll('.payment-option').forEach(o => o.classList.remove('selected'));
                this.classList.add('selected');
                this.querySelector('.payment-radio').checked = true;
            });
        });

        // Change button hover effect
        document.getElementById('address-change-btn').addEventListener('mouseover', function() {
            document.querySelector('#current-address').style.borderColor = '#2874f0';
        });

        document.getElementById('address-change-btn').addEventListener('mouseout', function() {
            if (!document.querySelector('#current-address').classList.contains('selected')) {
                document.querySelector('#current-address').style.borderColor = '#ddd';
            }
        });

        // Modal handling
        const addModal = document.getElementById('add-address-modal');
        const editModal = document.getElementById('edit-address-modal');
        const openAddModalBtn = document.getElementById('open-add-modal');
        const closeAddModalBtn = document.getElementById('close-add-modal');
        const closeEditModalBtn = document.getElementById('close-edit-modal');
        const cancelAddBtn = document.getElementById('cancel-add-btn');
        const cancelEditBtn = document.getElementById('cancel-edit-btn');

        openAddModalBtn.addEventListener('click', () => {
            addModal.style.display = 'flex';
            document.body.style.overflow = 'hidden';
        });

        const closeModal = () => {
            addModal.style.display = 'none';
            editModal.style.display = 'none';
            document.body.style.overflow = 'auto';
            document.getElementById('add-address-form').reset();
            document.getElementById('edit-address-form').reset();
            clearErrors('add-address-form');
            clearErrors('edit-address-form');
        };

        closeAddModalBtn.addEventListener('click', closeModal);
        closeEditModalBtn.addEventListener('click', closeModal);
        cancelAddBtn.addEventListener('click', closeModal);
        cancelEditBtn.addEventListener('click', closeModal);

        addModal.addEventListener('click', (event) => {
            if (event.target === addModal) closeModal();
        });
        editModal.addEventListener('click', (event) => {
            if (event.target === editModal) closeModal();
        });

        // Edit address function
        function editAddress(id, name, address, postOffice, district, state, pincode,phone) {
            document.getElementById('edit-id').value = id;
            document.getElementById('edit-name').value = name;
            document.getElementById('edit-phone').value = phone;
            document.getElementById('edit-address').value = address;
            document.getElementById('edit-post').value = postOffice;
            document.getElementById('edit-district').value = district;
            document.getElementById('edit-state').value = state;
            document.getElementById('edit-pincode').value = pincode;
            editModal.style.display = 'flex';
            document.body.style.overflow = 'hidden';
        }

        // Validation functions
        function addFormValidation() {
            let isValid = true;
            clearErrors('add-address-form');

            const name = document.getElementById('add-name').value.trim();
            const nameRegex = /^[A-Za-z\s]+$/;
            if (!name || name.length < 3 || name.length > 50 || !nameRegex.test(name)) {
                showError('add-name-error');
                isValid = false;
            }

            const phone = document.getElementById('add-phone').value.trim();
            const phoneRegex = /^[6-9]\d{9}$/;
            if (!phone || !phoneRegex.test(phone)) {
                showError('add-phone-error');
                isValid = false;
            }

            const pincode = document.getElementById('add-pincode').value.trim();
            const pincodeRegex = /^\d{6}$/;
            if (!pincode || !pincodeRegex.test(pincode) || parseInt(pincode) < 100000 || parseInt(pincode) > 999999) {
                showError('add-pincode-error');
                isValid = false;
            }

            const post = document.getElementById('add-post').value.trim();
            const postRegex = /^[A-Za-z\s]+$/;
            if (!post || post.length < 3 || post.length > 20 || !postRegex.test(post)) {
                showError('add-post-error');
                isValid = false;
            }

            const address = document.getElementById('add-address').value.trim();
            if (!address || address.length < 10 || address.length > 200) {
                showError('add-address-error');
                isValid = false;
            }

            const district = document.getElementById('add-district').value.trim();
            const districtRegex = /^[A-Za-z\s]+$/;
            if (!district || district.length < 3 || district.length > 50 || !districtRegex.test(district)) {
                showError('add-district-error');
                isValid = false;
            }

            const state = document.getElementById('add-state').value;
            if (!state) {
                showError('add-state-error');
                isValid = false;
            }

            const altPhone = document.getElementById('add-altPhone').value.trim();
            if (altPhone && !phoneRegex.test(altPhone)) {
                showError('add-altPhone-error');
                isValid = false;
            }

            return isValid;
        }

        function editAddressValidation() {
            let isValid = true;
            clearErrors('edit-address-form');

            const name = document.getElementById('edit-name').value.trim();
            const nameRegex = /^[A-Za-z\s]+$/;
            if (!name || name.length < 3 || name.length > 50 || !nameRegex.test(name)) {
                showError('edit-name-error');
                isValid = false;
            }

            const phone = document.getElementById('edit-phone').value.trim();
            const phoneRegex = /^[6-9]\d{9}$/;
            if (!phone || !phoneRegex.test(phone)) {
                showError('edit-phone-error');
                isValid = false;
            }

            const pincode = document.getElementById('edit-pincode').value.trim();
            const pincodeRegex = /^\d{6}$/;
            if (!pincode || !pincodeRegex.test(pincode) || parseInt(pincode) < 100000 || parseInt(pincode) > 999999) {
                showError('edit-pincode-error');
                isValid = false;
            }

            const post = document.getElementById('edit-post').value.trim();
            const postRegex = /^[A-Za-z\s]+$/;
            if (!post || post.length < 3 || post.length > 20 || !postRegex.test(post)) {
                showError('edit-post-error');
                isValid = false;
            }

            const address = document.getElementById('edit-address').value.trim();
            if (!address || address.length < 10 || address.length > 200) {
                showError('edit-address-error');
                isValid = false;
            }

            const district = document.getElementById('edit-district').value.trim();
            const districtRegex = /^[A-Za-z\s]+$/;
            if (!district || district.length < 3 || district.length > 50 || !districtRegex.test(district)) {
                showError('edit-district-error');
                isValid = false;
            }

            const state = document.getElementById('edit-state').value;
            if (!state) {
                showError('edit-state-error');
                isValid = false;
            }

            const altPhone = document.getElementById('edit-altPhone').value.trim();
            if (altPhone && !phoneRegex.test(altPhone)) {
                showError('edit-altPhone-error');
                isValid = false;
            }

            return isValid;
        }

        function showError(errorId) {
            document.getElementById(errorId).classList.add('show');
        }

        function clearErrors(formId) {
            document.getElementById(formId).querySelectorAll('.error').forEach(error => {
                error.classList.remove('show');
            });
        }

        // Form submissions
        document.getElementById('add-address-form').addEventListener('submit', function(e) {
            e.preventDefault();
            if (addFormValidation()) {
                const formData = new FormData(this);
                const data = Object.fromEntries(formData);
                fetch('/add-address', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                })
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        Swal.fire({
                            position: 'bottom',
                            icon: 'success',
                            title: result.msg,
                            showConfirmButton: false,
                            timer: 1500,
                            background: '#000',
                            color: '#fff',
                            timerProgressBar: true,
                            toast: true
                        }).then(() => window.location.reload());
                    } else {
                        Swal.fire({
                            position: 'bottom',
                            icon: 'error',
                            title: result.msg || 'Failed to add address',
                            showConfirmButton: false,
                            timer: 1500,
                            background: '#000',
                            color: '#fff',
                            toast: true
                        });
                    }
                });
            }
        });

        document.getElementById('edit-address-form').addEventListener('submit', function(e) {
            e.preventDefault();
            if (editAddressValidation()) {
                const formData = new FormData(this);
                const data = Object.fromEntries(formData);
                fetch('/edit-address', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                })
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        Swal.fire({
                            position: 'bottom',
                            icon: 'success',
                            title: result.msg,
                            showConfirmButton: false,
                            timer: 1500,
                            background: '#000',
                            color: '#fff',
                            timerProgressBar: true,
                            toast: true
                        }).then(() => window.location.reload());
                    } else {
                        Swal.fire({
                            position: 'bottom',
                            icon: 'error',
                            title: result.msg || 'Failed to edit address',
                            showConfirmButton: false,
                            timer: 1500,
                            background: '#000',
                            color: '#fff',
                            toast: true
                        });
                    }
                });
            }
        });

        function placeOrder(){
            console.log("llllllllll")
           const selectedPaymentOption=document.getElementById("selectedPaymentOption").value
           const selectedAddressId=document.getElementById("selectedAddressId").value
          console.log(selectedPaymentOption)
           fetch("/checkout",{
            method:'POST',
            headers:{
                'Content-Type':'application/json'
            },
            body:JSON.stringify({
                addressId:selectedAddressId,
                paymentOption:selectedPaymentOption
            })
           }).then(response=> response.json())
           .then(data=>{
            console.log(data)
            
            if (!data.success) {
                    Swal.fire({
                        position: 'bottom',
                        icon: 'error',
                        title: data.msg,
                        showConfirmButton: false,
                        timer: 1500,
                        background: '#000',
                        color: '#fff',
                        toast: true
                    });
                    return;
                }

                if (selectedPaymentOption === 'razorpay') {
                    console.log(data)
                    const options = {
                        key: data.razorpayOrder.key,
                        amount: data.razorpayOrder.amount,
                        currency: data.razorpayOrder.currency,
                        order_id: data.razorpayOrder.id,
                        name: 'Nutify',
                        description: 'Order Payment',
                        handler: function(response) {
                            // Verify payment
                            fetch('/verifyPayment', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    razorpay_payment_id: response.razorpay_payment_id,
                                    razorpay_order_id: response.razorpay_order_id,
                                    razorpay_signature: response.razorpay_signature,
                                    orderDetails: data.orderDetails
                                })
                            })
                            .then(res => res.json())
                            .then(verifyData => {
                                if (verifyData.success) {
                                    Swal.fire({
                                        position: 'bottom',
                                        icon: 'success',
                                        title: verifyData.msg,
                                        showConfirmButton: false,
                                        timer: 1500,
                                        background: '#000',
                                        color: '#fff',
                                        toast: true
                                    }).then(() => {
                                        window.location.href = verifyData.redirectUrl;
                                    });
                                } else {
                                    console.log("thissssssssssssss")
                                    Swal.fire({
                                        position: 'bottom',
                                        icon: 'error',
                                        title: verifyData.msg,
                                        showConfirmButton: false,
                                        timer: 1500,
                                        background: '#000',
                                        color: '#fff',
                                        toast: true
                                    }).then(()=>{
                                        window.location.href="/orderFailed"
                                    })
                                }
                            });
                        },
                        prefill: {
                            name: '<%= address.address[0].name %>',
                            contact: '<%= address.address[0].phone %>'
                        },
                        theme: {
                            color: '#2874f0'
                        }
                    };

                    const rzp = new Razorpay(options);
                    rzp.open();
                    
rzp.on('payment.failed', function (response) {
    console.log("Razorpay payment failed:", response.error);

    fetch('/payment-failed', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ orderDetails: data.orderDetails })
    })
    .then(res=>res.json())
    .then((data)=>{
        if(data.success){
           
        window.location.href = "/orderFailed";
    
        }
    })
    
});
                } else {
                    Swal.fire({
                        position: 'bottom',
                        icon: 'success',
                        title: data.msg,
                        showConfirmButton: false,
                        timer: 1500,
                        background: '#000',
                        color: '#fff',
                        toast: true
                    }).then(() => {
                        window.location.href = data.redirectUrl;
                    });
                }
            })
        }

        function paymentOption(){
            
            document.getElementById("selectedPaymentOption").value='cashOnDelivery'

           
        }

        function paymentOption1(){
            
            document.getElementById("selectedPaymentOption").value='razorpay'
            
        }
        function paymentOption2(){
            document.getElementById("selectedPaymentOption").value='wallet'

        }
    </script>
</body>
</html>
<%-include("../../views/partials/user/footer")%>